openapi: 3.0.0
info:
  title: Academica Course Scheduling API
  version: 1.1.0
  description: |
    API specification for the Academica course scheduling system.

    Features:
    - Course and Section Management
    - Schedule Creation and Management
    - User Authentication and Session Management
    - Professor Ratings (Rate My Professor integration with 24-hour cache)
    - Course Filtering and Search
servers:
  - url: http://localhost:8000
paths:
  /api/CourseScheduling/createCourse:
    post:
      summary: Create a new course
      description: Creates a new course with a specified title and department.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
                title: { type: string }
                department: { type: string }
      responses:
        "200":
          description: Course created
          content:
            application/json:
              schema:
                type: object
                properties:
                  c:
                    type: object
                    properties:
                      id: { type: string }
                      title: { type: string }
                      department: { type: string }
        "400":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /api/CourseScheduling/createSection:
    post:
      summary: Create a new section
      description: Creates a new section for an existing course.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId: { type: string }
                sectionNumber: { type: string }
                instructor: { type: string }
                capacity: { type: integer }
                timeSlots:
                  type: array
                  items:
                    type: object
                    properties:
                      days: { type: array, items: { type: string } }
                      startTime: { type: string }
                      endTime: { type: string }
                      location: { type: string }
      responses:
        "200":
          description: Section created
          content:
            application/json:
              schema:
                type: object
                properties:
                  s:
                    type: object
                    properties:
                      id: { type: string }
                      courseId: { type: string }
                      sectionNumber: { type: string }
                      instructor: { type: string }
                      capacity: { type: integer }
                      timeSlots:
                        type: array
                        items:
                          type: object
                          properties:
                            days: { type: array, items: { type: string } }
                            startTime: { type: string }
                            endTime: { type: string }
                            location: { type: string }
        "400":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /api/CourseScheduling/addSection:
    post:
      summary: Add section to schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                scheduleId: { type: string }
                sectionId: { type: string }
      responses:
        "200":
          description: Section added
          content:
            application/json:
              schema: { type: object }
        "400":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /api/CourseScheduling/editSection:
    post:
      summary: Edit existing section
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sectionId: { type: string }
                updates:
                  type: object
                  properties:
                    sectionNumber: { type: string }
                    instructor: { type: string }
                    capacity: { type: integer }
                    timeSlots:
                      type: array
                      items:
                        type: object
                        properties:
                          days: { type: array, items: { type: string } }
                          startTime: { type: string }
                          endTime: { type: string }
                          location: { type: string }
      responses:
        "200":
          description: Section edited
          content:
            application/json:
              schema:
                type: object
                properties:
                  s:
                    $ref: "#/components/schemas/Section"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/removeSection:
    post:
      summary: Remove section from schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                scheduleId: { type: string }
                sectionId: { type: string }
      responses:
        "200": { description: Section removed }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/createSchedule:
    post:
      summary: Create a new schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                name: { type: string }
      responses:
        "200":
          description: Schedule created
          content:
            application/json:
              schema:
                type: object
                properties:
                  s:
                    $ref: "#/components/schemas/Schedule"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/deleteSchedule:
    post:
      summary: Delete schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                scheduleId: { type: string }
      responses:
        "200": { description: Schedule deleted }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/duplicateSchedule:
    post:
      summary: Duplicate existing schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                sourceScheduleId: { type: string }
                newName: { type: string }
      responses:
        "200":
          description: Schedule duplicated
          content:
            application/json:
              schema:
                type: object
                properties:
                  s:
                    $ref: "#/components/schemas/Schedule"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/getCourse:
    post:
      summary: Get a single course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId: { type: string }
      responses:
        "200":
          description: Course retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/getSection:
    post:
      summary: Get a single section
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sectionId: { type: string }
      responses:
        "200":
          description: Section retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Section"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/getAllCourses:
    post:
      summary: Get all courses
      responses:
        "200":
          description: All courses retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/getAllSections:
    post:
      summary: Get all sections
      responses:
        "200":
          description: All sections retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Section"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseScheduling/getAllSchedules:
    post:
      summary: Get all schedules
      responses:
        "200":
          description: All schedules retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schedule"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # CourseFiltering endpoints
  /api/CourseFiltering/addTag:
    post:
      summary: Add a filter tag
      description: Adds a tag to the active filter set and updates filtered courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
                category: { type: string }
      responses:
        "200":
          description: Tag added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseFiltering/removeTag:
    post:
      summary: Remove a filter tag
      description: Removes a tag from the active filter set and updates filtered courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
                category: { type: string }
      responses:
        "200":
          description: Tag removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseFiltering/clearTags:
    post:
      summary: Clear all filter tags
      description: Clears all active tags and resets to show all courses
      responses:
        "200":
          description: All tags cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseFiltering/getFilteredCourses:
    post:
      summary: Get filtered courses
      description: Returns courses that match the current active filter tags
      responses:
        "200":
          description: Filtered courses retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilteredCourse"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseFiltering/getActiveTags:
    post:
      summary: Get active filter tags
      description: Returns the currently active filter tags
      responses:
        "200":
          description: Active tags retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/CourseFiltering/suggestAlternatives:
    post:
      summary: Get AI-suggested alternative courses
      description: Uses AI to suggest courses similar to a given course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course:
                  $ref: "#/components/schemas/FilteredCourse"
                variant:
                  type: string
                  enum: ["base", "timeFocused", "topicFocused"]
                  default: "base"
      responses:
        "200":
          description: Alternative courses suggested
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FilteredCourse"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # UserAuth endpoints
  /api/UserAuth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { type: string }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/UserAuth/authenticate:
    post:
      summary: Authenticate user
      description: Authenticates a user with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        "200":
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { type: string }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Session endpoints
  /api/Session/startSession:
    post:
      summary: Start a new user session
      description: Creates a new session for an authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                u: { type: string }
      responses:
        "200":
          description: Session started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  session: { type: string }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/Session/endSession:
    post:
      summary: End a user session
      description: Ends an existing user session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                s: { type: string }
      responses:
        "200":
          description: Session ended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/Session/useSession:
    post:
      summary: Verify session validity
      description: Verifies if a session is still active and unexpired
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                s: { type: string }
      responses:
        "200":
          description: Session is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/Session/extendSession:
    post:
      summary: Extend session validity
      description: Extends the validity of an existing session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                s: { type: string }
      responses:
        "200":
          description: Session extended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  session: { type: string }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/Session/expireSessions:
    post:
      summary: Expire old sessions
      description: System action to expire sessions that have passed their expiry time
      responses:
        "200":
          description: Sessions expired successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/ProfessorRatings/getRatingForSection:
    post:
      summary: Get professor rating for a section
      description: Retrieves Rate My Professor rating for the instructor of a given section. Uses 24-hour cache to minimize API calls.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sectionId:
                  type: string
                  description: The ID of the section to get professor rating for
              required:
                - sectionId
      responses:
        "200":
          description: Professor rating retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: "#/components/schemas/ProfessorRating"
                  message:
                    type: string
                    description: Error message if success is false
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/ProfessorRatings/refreshRating:
    post:
      summary: Manually refresh a professor's rating
      description: Forces a fresh fetch from Rate My Professor API, bypassing cache
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                instructorName:
                  type: string
                  description: Full name of the instructor
              required:
                - instructorName
      responses:
        "200":
          description: Rating refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: "#/components/schemas/ProfessorRating"
                  message:
                    type: string
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/ProfessorRatings/getAllCachedRatings:
    post:
      summary: Get all cached professor ratings
      description: Returns all cached professor ratings (admin/debugging endpoint)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Cached ratings retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProfessorRating"
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/ProfessorRatings/clearCache:
    post:
      summary: Clear all cached ratings
      description: Removes all cached professor ratings (admin endpoint)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Cache cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  deletedCount:
                    type: integer
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Course:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        department: { type: string }
    Section:
      type: object
      properties:
        id: { type: string }
        courseId: { type: string }
        sectionNumber: { type: string }
        instructor: { type: string }
        capacity: { type: integer }
        timeSlots:
          type: array
          items:
            type: object
            properties:
              days: { type: array, items: { type: string } }
              startTime: { type: string }
              endTime: { type: string }
              location: { type: string }
    Schedule:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        sectionIds: { type: array, items: { type: string } }
        owner: { type: string }
    Error:
      type: object
      properties:
        error: { type: string }

    # CourseFiltering schemas
    Tag:
      type: object
      properties:
        id: { type: string }
        category: { type: string }

    FilteredCourse:
      type: object
      properties:
        course_code: { type: string }
        section: { type: string }
        title: { type: string }
        professor: { type: string }
        meeting_time: { type: string }
        current_enrollment: { type: integer }
        seats_available: { type: integer }
        seats_total: { type: integer }
        distribution: { type: string }
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"

    # UserAuth schemas
    User:
      type: object
      properties:
        _id: { type: string }
        username: { type: string }
        password: { type: string }

    # Session schemas
    Session:
      type: object
      properties:
        _id: { type: string }
        userID: { type: string }
        expiryTime: { type: string, format: date-time }

    # ProfessorRatings schemas
    ProfessorRating:
      type: object
      properties:
        instructorName:
          type: string
          description: Full name of the instructor
        schoolName:
          type: string
          description: Name of the institution (e.g., "Wellesley College")
        rating:
          type: number
          nullable: true
          description: Overall rating from 0.0 to 5.0, null if not rated
        difficulty:
          type: number
          nullable: true
          description: Difficulty rating from 0.0 to 5.0, null if not available
        numRatings:
          type: integer
          description: Number of ratings/reviews
        wouldTakeAgainPercent:
          type: number
          nullable: true
          description: Percentage of students who would take the professor again (0-100)
        rmpId:
          type: string
          description: Rate My Professor internal ID for the instructor
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp of when this rating was cached
