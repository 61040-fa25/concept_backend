/**
 * This script automates the creation of barrel files for concept imports.
 * It scans a specified directory for concept implementations and generates
 * two files:
 *  - `concepts.ts`: For production use, instantiating concepts with the main database.
 *  - `test_concepts.ts`: For testing, instantiating concepts with a separate test database.
 *
 * This enables convenient, typed imports like:
 * `import { User, Post } from "@concepts";`
 * `import { User, Post } from "@test-concepts";`
 *
 * Run this script using `deno task import`.
 */
import * as path from "jsr:@std/path";

// 1. Configuration
const CONCEPTS_DIR = Deno.env.get("CONCEPTS_DIR") ?? "src/concepts";

interface ConceptInfo {
  name: string; // PascalCase name, e.g., "User"
  dirName: string; // Original directory name, e.g., "user"
  importPath: string; // Relative path for import statement, e.g., "./user/UserConcept.ts"
}

/**
 * Scans the base directory to find all valid concept implementations.
 * A valid concept is a directory named `{name}` containing a `{name}Concept.ts` file.
 */
async function discoverConcepts(baseDir: string): Promise<ConceptInfo[]> {
  const concepts: ConceptInfo[] = [];
  const absoluteBaseDir = path.resolve(baseDir);

  for await (const dirEntry of Deno.readDir(absoluteBaseDir)) {
    if (!dirEntry.isDirectory) {
      continue;
    }

    const conceptDirName = dirEntry.name;
    const expectedFileName = `${conceptDirName}Concept.ts`;
    const conceptFilePath = path.join(
      absoluteBaseDir,
      conceptDirName,
      expectedFileName,
    );

    try {
      await Deno.stat(conceptFilePath); // Check if file exists
      const conceptName = conceptDirName.charAt(0).toUpperCase() +
        conceptDirName.slice(1);

      concepts.push({
        name: conceptName,
        dirName: conceptDirName,
        importPath: `./${conceptDirName}/${expectedFileName}`,
      });
      console.log(`  -> Found concept: ${conceptName}`);
    } catch (error) {
      if (error instanceof Deno.errors.NotFound) {
        // This directory doesn't contain a concept file, so we ignore it.
      } else {
        // Re-throw other unexpected errors.
        throw error;
      }
    }
  }
  return concepts;
}

/**
 * Generates the full content for a barrel file (either production or test).
 */
function generateBarrelFileContent(
  concepts: ConceptInfo[],
  isTest: boolean,
): string {
  const header =
    `// This file is auto-generated by the \`generate_imports.ts\` script.
// Do not edit it manually, unless you know your concept requires a custom instantiation procedure.

import { SyncConcept } from "@engine";

export const Engine = new SyncConcept();\n`;

  const dbImportFunc = isTest ? "testDb" : "getDb";
  const dbImport = `import { ${dbImportFunc} } from "@utils/database.ts";\n`;

  const conceptClassImports = concepts
    .map((c) => `import ${c.name}Concept from "${c.importPath}";`)
    .join("\n");

  const conceptTypeExports = concepts
    .map(
      (c) =>
        `export type { default as ${c.name}Concept } from "${c.importPath}";`,
    )
    .join("\n");

  const dbInitialization = `
// Initialize the database connection
export const [db, client] = await ${dbImportFunc}();
`;

  const instantiations = concepts
    .map((c) =>
      `export const ${c.name} = Engine.instrumentConcept(new ${c.name}Concept(db));`
    )
    .join("\n");

  return [
    header,
    dbImport,
    conceptClassImports,
    "", // newline
    conceptTypeExports,
    dbInitialization,
    instantiations,
    "", // trailing newline
  ].join("\n");
}

/**
 * Main execution function.
 */
async function main() {
  console.log(`Scanning for concepts in '${CONCEPTS_DIR}'...`);
  const concepts = await discoverConcepts(CONCEPTS_DIR);

  if (concepts.length === 0) {
    console.warn("Warning: No concepts found. Generated files will be empty.");
  }

  // Generate production barrel file
  const prodContent = generateBarrelFileContent(concepts, false);
  const prodFilePath = path.join(CONCEPTS_DIR, "concepts.ts");
  await Deno.writeTextFile(prodFilePath, prodContent);
  console.log(`✅ Generated production barrel file: ${prodFilePath}`);

  // Generate test barrel file
  const testContent = generateBarrelFileContent(concepts, true);
  const testFilePath = path.join(CONCEPTS_DIR, "test_concepts.ts");
  await Deno.writeTextFile(testFilePath, testContent);
  console.log(`✅ Generated test barrel file: ${testFilePath}`);
}

// Run the main function if this script is executed directly.
if (import.meta.main) {
  main().catch((err) => {
    console.error("Error generating import files:", err);
    Deno.exit(1);
  });
}
